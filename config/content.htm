<h1>About</h1>
<p>41223235 機械設計一乙 陳脩升</p>
<p>Github個人倉儲：<a href="https://41223235.github.io/cp2023/content/index.html">https://41223235.github.io/cp2023/content/index.html</a></p>
<p>分組：<a href="https://github.com/41023101/cp2023_ag1"></a>倉儲：<a href="https://41223235.github.io/cp2023_bg2/content/index.html">https://41223235.github.io/cp2023_bg2/content/index.html</a><br/> <span style="color: #ffffff;">分組：</span>網站：<a href="https://github.com/41223235/cp2023_bg2">https://github.com/41223235/cp2023_bg2</a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.oct</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<p></p>
<h1>w6</h1>
<h2>台灣國旗 ROC</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);

    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_roc_flag.c -lgd -lm</p>
<p>./a.out</p>
<p></p>
<p><img caption="false" height="267" src="/images/roc_flag.png" width="400"/></p>
<p><video controls="controls" height="630" width="1004">
<source src="/images/70.mp4" type="video/mp4"/></video></p><h2>美國國旗 USA</h2>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_usa_flag.c -lgd -lm</p>
<p>./a.out</p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<p><video controls="controls" height="630" width="1004">
<source src="/images/71.mp4" type="video/mp4"/></video></p>
<div class="line number1 index0 alt2"></div><h1>w7</h1>
<h4>中國國旗 CHINA</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_japan_flag(img);
 
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    
 
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
 
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<h4>日本國旗 JAPAN</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );
 
int main() {
    // width 3: height 2
    int width = 1200;
    int height = 2 * width / 3;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_japan_flag(img);
 
    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
void draw_japan_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white ;
    int center_x =  0.5 * width;
    int center_y =  0.5 * height;
    int sun_radius = 145 ;
 
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    
 
    // 繪製白色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, white);
 
 
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<p></p>
<p><video controls="controls" height="630" width="1008">
<source src="/images/987.mp4" type="video/mp4"/></video></p>
<p><span>英國國旗 UK</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);
 
int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;
 
    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    // 绘制英国国旗
    draw_uk_flag(img);
 
    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}
 
 
 
void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
 
    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色
 
    gdImageFilledRectangle(img, 0, 0, width, height, blue);
 
 
  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);
 
    int x1, y1, x2, y2, x3, y3;
 
    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);
 
    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);
 
     
    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);
 
    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);
 
  int x1, y1, x2, y2, x3, y3;
   
  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );
   
   
  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);
 
 
  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);
     
   
  }
   
    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;
 
    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);
 
    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<h4>韓國國旗 KOREA</h4>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標
  
 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
  
  {
    
  
  // 起點和終點位置
  
  int startX = 340;    
  // 線的起點 X 座標
  
  int startY = 90;   
  // 線的起點 Y 座標
  
  int endX = 200;     
  // 線的終點 X 座標
  
  int endY = 260;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
  
  int startX = 330;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 190;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置
  
  int startX = 564;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 704;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
    
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
    
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
    
  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
  
  int startX = 330;    
  // 線的起點 X 座標
  
  int startY = 520;   
  // 線的起點 Y 座標
  
  int endX = 190;     
  // 線的終點 X 座標
  
  int endY = 350;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置
  
  int startX = 564;    
  // 線的起點 X 座標
  
  int startY = 97;   
  // 線的起點 Y 座標
  
  int endX = 704;     
  // 線的終點 X 座標
  
  int endY = 267;     
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
    
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
    
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
    
  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }
  
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/><br/><br/></p>
<h1>w12</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">	#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
int main() {
    int width = 800;
    int height = 600;
 
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {
 
fprintf(stderr, "Error opening the output file.\n");
 
return 1;
    }
    
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);
    
    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);
    
    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);
 
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
  
// Declare the rotation function
void rotateFilledPolygon(int x_orig, int y_orig, double rotation_ang, gdPoint *points, int num_points) {
    int i;
    double angle_rad = rotation_ang * M_PI / 180.0;
  
    for (i = 0; i &lt; num_points; i++) {
        int x = points[i].x - x_orig;
        int y = points[i].y - y_orig;
  
        points[i].x = x_orig + (int)(x * cos(angle_rad) - y * sin(angle_rad));
        points[i].y = y_orig + (int)(x * sin(angle_rad) + y * cos(angle_rad));
    }
}
  
int main() {
    int width = 800;
    int height = 600;
  
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
  
    FILE *outputFile = fopen("./../images/hellogd2.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
  
    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
  
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width / 4, (int)height / 4, blue);
  
    gdImageFilledEllipse(img, (int)width * 3 / 4, (int)height / 4, (int)width / 4, (int)width / 4, red);
    gdImageEllipse(img, (int)width * 3 / 4, (int)height * 3 / 4, (int)width / 4, (int)width / 4, red);
    gdImageLine(img, (int)width / 2, (int)height / 2, (int)width / 2, (int)height / 2 + 100, blue);
  
    gdPoint points[4];
    points[0].x = (int)width / 4;
    points[0].y = (int)height * 3 / 4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
  
    // Call the rotation function multiple times
    for (int i = 0; i &lt; 4; i++) {
        rotateFilledPolygon((int)width / 4 + 50, (int)height * 3 / 4 + 50, 30.0, points, 4);
        gdImagePolygon(img, points, 4, black);
    }
  
    gdPoint points2[4];
    points2[0].x = (int)width / 3;
    points2[0].y = (int)height / 2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
  
    // Call the rotation function multiple times
    for (int i = 0; i &lt; 12; i++) {
        //rotateFilledPolygon((int)width / 3 + 50, (int)height / 2 + 50, 30.0, points2, 4);
        rotateFilledPolygon(500, 200, 30.0, points2, 4);
        gdImageFilledPolygon(img, points2, 4, red);
    }
  
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
  
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/hellogd2.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
 
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
 
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
 
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
 
        t += dt;
    }
 
    // Close the data file
    fclose(outputFile);
 
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
 
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>w15</h1>
<div>1) 根據 <a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EVcefUI2zPpAmP6lnLWLEAoBCBznMnvFpsNE-1VVFGvVZQ?e=goiPpP&amp;isSPOFile=1" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/evcefui2zppamp6lnlwleaobcbznmnvfpsne-1vvfgvvzq?e=goippp">roc_list_coord_flag.7z</a> 程式內容所印出的六組 ABED 等繪製 ROC 國旗白日圖案中的菱形四個關鍵點, 請直接在青天與滿地紅的圖案中, 利用白色作為畫線顏色, 將第二組的 ABED 等四個點的座標, 以直線相連.</div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;

    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);

    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;

    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色

    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

    // 在青天與滿地紅的圖案中以白色畫線繪製連接菱形的四個關鍵點
    gdImageSetThickness(img, 10); // 設置線條粗度為10
    gdImageLine(img, 429, 125, 279, 165, white);
    gdImageLine(img, 279, 165, 170, 274, white);
    gdImageLine(img, 170, 274, 170, 274, white);
    gdImageLine(img, 429, 125, 170, 274, white); // 加入第四條連線
}
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color) {
    // 實現 draw_white_sun 函數的內容
    // 可以在此處繪製白日的內部圖案
}</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/第一題.mp4" type="video/mp4"/></video></p>
<div>2) 承上題, 請列出第二組 ABED 的四條直線與白日中的大圓所相交 (intersect) 的四個點座標.</div>
<div>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China 
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library 
// https://www.rapidtables.com/web/color/RGB_Color.html 
// 幾何形狀著色與繪圖練習 
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 
#include &lt;stdio.h&gt; 
#include &lt;gd.h&gt; 
#include &lt;math.h&gt; 
 
void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); 
 
int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 
 
    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 
 
    draw_roc_flag(img); 
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} 
void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 
   gdImageSetThickness(img, 10); // 設置線條寬度為10
   gdImageLine(img, x1, y1, x2, y2, white); // 畫線
   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  { 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  // 利用一個藍色大圓與白色小圓畫出藍色環狀 
  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); 
  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); 
 
 
  // 定義座標結構 
  typedef struct { 
      double x; 
      double y; 
  } Point; 
 
  // 計算圓與線的交點 
  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { 
      // 直線斜率 
      double m = (y2 - y1) / (x2 - x1); 
 
      // 直線方程式中的常數項 
      double b = y1 - m * x1; 
 
      // 圓與直線交點的計算 
      double A = 1 + pow(m, 2); 
      double B = 2 * (m * b - m * k - h); 
      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); 
 
      // 判斷交點個數 
    double discriminant = pow(B, 2) - 4 * A * C; 
    if (discriminant &gt; 0) { 
        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); 
        double y_intersect1 = m * x_intersect1 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1); 
 
        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); 
        double y_intersect2 = m * x_intersect2 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2); 
    } else if (discriminant == 0) { 
        double x_intersect = -B / (2 * A); 
        double y_intersect = m * x_intersect + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect); 
    } else { 
        printf("No points.\n"); 
    } 
 
  } 
      // 圓的參數 
      double circle_x = (int)(width/4); // 圓心 x 座標 
      double circle_y = (int)(height/4); // 圓心 y 座標 
      double radius = white_circle_dia +  white_circle_dia*2/15; // 圓半徑 
      // 兩點座標 
  double x3 = 170; 
  double y3 = 274; 
  double x4 = 279; 
  double y4 = 165; 
 
  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); 
 
  double x5 = 279; 
  double y5 = 165; 
  double x6 = 429; 
  double y6 = 125; 
 
  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); 
  }</pre>
<p><video controls="controls" height="630" width="1008">
<source src="/images/2..mp4" type="video/mp4"/></video></p>
</div>
<div></div>
<h1>w16</h1>
<p>1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define WIDTH 800
#define HEIGHT 600
#define SCALE 100
 
//繪製電阻形狀
void drawResistor(gdImagePtr im, int x1, int y, int width, int height) {
    int startX = x1 ;
    int endX = x1 + width ;
 
    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
  // 向上45度
    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
 
  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 
 
  {
    int startX = 100;
  gdImageColorAllocate(im, 0, 0, 255);
 
 
    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
 
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 }
 
  {
    int startX = 585;
  gdImageColorAllocate(im, 0, 0, 255);
 
 
    // 第一段直線向前走一段
    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上90度
    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));
    // 向下90度
    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));
 
    // 向上45度
      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));
 
    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));
 
    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));
 
}
}
 
int main() {
    gdImagePtr im;
    FILE *outputFile;
 
    // 創建圖像物件
    im = gdImageCreateTrueColor(WIDTH, HEIGHT);
    if (im == NULL) {
        fprintf(stderr, "Error creating GD image.\n");
        return 1;
    }
 
    outputFile = fopen("1.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
 
    //配置顏色
    int black, white, red, blue, green;
 
    black = gdImageColorAllocate(im, 0, 0, 0);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 255, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 255);
green = gdImageColorAllocate(im, 0, 255, 0);
    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);
 
    // 繪製牆面
    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);
    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);
 
   // 繪製彈簧(電阻)
    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);
 
    // 繪製質量（方形）
    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);
 
  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);
 
 
    //生成圖片
    gdImagePng(im, outputFile);
    fclose(outputFile);
    gdImageDestroy(im);
 
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/1.png" width="400"/></p>
<p>2.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
 
#define TIME_STEP 0.01 // 時間步長
#define SIMULATION_TIME 10.0 // 模擬時間
 
// 物體參數
#define m1 2.0
#define m2 3.0
#define k1 0.5
#define k2 1.0
#define k3 1.5
#define c1 0.25
#define c2 0.33
#define c3 0.5
#define X1_initial 1.0
#define X2_initial -0.5
#define V0 0.0
 
// 計算阻尼力
double dampingForce(double c, double v) {
    return -c * v;
}
 
// 模擬物體運動
void simulateMotion() {
  double X1 = X1_initial;
  double X2 = X2_initial;
  double V1 = V0;
  double V2 = V0;
 
  FILE *fp;
  fp = fopen("motion_data.txt", "w");
 
  for (double t = 0; t &lt;= SIMULATION_TIME; t += TIME_STEP) {
  double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一個物體受到的合力
  double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二個物體受到的合力
  double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二個物體受到的合力
 
  double a1 = F1 / m1; // 第一個物體的加速度
  double a2 = F2 / m2; // 第二個物體的加速度
 
// 更新速度和位置
   V1 += a1 * TIME_STEP;
   V2 += a2 * TIME_STEP;
 
  X1 += V1 * TIME_STEP;
  X2 += V2 * TIME_STEP;
 
// 在文件寫入時紀錄 m1 和 m2 的位置和速度數據
  fprintf(fp, "%lf %lf %lf %lf %lf\n", t, X1, X2, V1, V2);
    }
 
 
  fclose(fp);
}
 
int main() {
    simulateMotion();
    return 0;
}
</pre>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
    FILE *gnuplotPipe = popen("gnuplot", "w");
    if (gnuplotPipe) {
        fprintf(gnuplotPipe, "set terminal png\n");
        fprintf(gnuplotPipe, "set output 'motion_plot.png'\n");
        fprintf(gnuplotPipe, "set xlabel 'Time'\n");
        fprintf(gnuplotPipe, "set ylabel 'Position / Velocity'\n");
        fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines title 'm1 position', 'motion_data.txt' using 1:3 with lines title 'm2 position', 'motion_data.txt' using 1:4 with lines title 'm1 velocity', 'motion_data.txt' using 1:5 with lines title 'm2 velocity'\n");
        fprintf(gnuplotPipe, "exit\n");
        fflush(gnuplotPipe);
        pclose(gnuplotPipe);
    } else {
        printf("Error opening pipe to Gnuplot.\n");
    }
    return 0;
}</pre>
<p><img alt="" height="300" src="/images/motion_plot.png" width="400"/></p>
<h1>ANSIC</h1>
<h2>練習一</h2>
<p><span>1.編寫一個 C 程式來列印您的姓名、出生日期和手機號碼</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()  
{
    // Print Name
    printf("Name   : komi\n"); 

    // Print Date of Birth
    printf("DOB    : July 19, 2005\n"); 

    // Print Mobile Number
    printf("Mobile : 08-9999999999\n"); 

    // Indicate successful execution
    return(0); 
}</pre>
<p><video controls="controls" height="630" width="1004">
<source src="/images/11.mp4" type="video/mp4"/></video></p>
<p><span>2.</span><span>編寫一個C 程式來取得您正在使用的C 版本</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main(int argc, char** argv) {
    // Check for C standard version
    #if __STDC_VERSION__ &gt;=  201710L
        printf("We are using C18!\n");
    #elif __STDC_VERSION__ &gt;= 201112L
        printf("We are using C11!\n");
    #elif __STDC_VERSION__ &gt;= 199901L
        printf("We are using C99!\n");
    #else
        printf("We are using C89/C90!\n");
    #endif
 
    // Indicate successful execution
    return 0;
}</pre>
<p><video controls="controls" height="630" width="1004">
<source src="/images/12.mp4" type="video/mp4"/></video></p>
<p><span>3.</span><span>寫一個 C 程序，使用哈希 (#) 列印一個區塊 F，其中 F 的高度為 6 個字符，寬度為 5 個和 4 個字符。</span><span>並且還列印一個非常大的“C”</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() 
{
    // Print top line of pattern
    printf("    ######\n");
 
    // Print second line of pattern
    printf("  ##      ##\n");
 
    // Print lines 3 to 7 of pattern
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");
    printf(" #\n");
 
    // Print bottom line of pattern
    printf("  ##      ##\n");
 
    // Print last line of pattern
    printf("    ######\n");
 
    return(0);
}</pre>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/13.mp4" type="video/mp4"/></video></span></p>
<p><span>4.</span><span>寫一個C 程序，反向列印下列字元</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() 
{
    // Declare and initialize character variables
    char char1 = 'X';
    char char2 = 'M';
    char char3 = 'L';
 
    // Print the original and reversed characters
    printf("The reverse of %c%c%c is %c%c%c\n",
        char1, char2, char3,
        char3, char2, char1);
 
    return(0);
}</pre>
<p><br/><video controls="controls" height="630" width="1004">
<source src="/images/14.mp4" type="video/mp4"/></video></p>
<p><span>5.</span><span>寫一個 C 程式來計算高 7 英吋、寬 5 英吋的矩形的周長和面積</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt; 
 
/* 
   Variables to store the width and height of a rectangle in inches 
*/
int width;          
int height;         
 
int area;           /* Variable to store the area of the rectangle */
int perimeter;      /* Variable to store the perimeter of the rectangle */
 
int main() {
    /* Assigning values to height and width */
    height = 7;
    width = 5;
 
    /* Calculating the perimeter of the rectangle */
    perimeter = 2*(height + width);
    printf("Perimeter of the rectangle = %d inches\n", perimeter);
     
    /* Calculating the area of the rectangle */
    area = height * width;
    printf("Area of the rectangle = %d square inches\n", area);
 
    return(0);
}</pre>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/15.mp4" type="video/mp4"/></video></span></p>
<p><span>6.</span><span>寫一個 C 程式來計算給定半徑的圓的周長和面積</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
   int radius;      /* Variable to store the radius of the circle */
   float area, perimeter;    /* Variables to store the area and perimeter of the circle */
   radius = 6;      /* Assigning a value to the radius */
 
   /* Calculating the perimeter of the circle */
   perimeter = 2 * 3.14 * radius;
   printf("Perimeter of the Circle = %f inches\n", perimeter);
 
   /* Calculating the area of the circle */
   area = 3.14 * radius * radius;
   printf("Area of the Circle = %f square inches\n", area);
 
   return(0);
}</pre>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/16.mp4" type="video/mp4"/></video></span></p>
<p><span>7.</span><span>寫一個C 程式來顯示多個變數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main()
{
    int a = 125, b = 12345;        /* Declare and initialize integer variables */
    long ax = 1234567890;          /* Declare and initialize long integer variable */
    short s = 4043;                /* Declare and initialize short integer variable */
    float x = 2.13459;             /* Declare and initialize floating-point variable */
    double dx = 1.1415927;         /* Declare and initialize double precision variable */
    char c = 'W';                  /* Declare and initialize character variable */
    unsigned long ux = 2541567890; /* Declare and initialize unsigned long integer variable */
 
    /* Various arithmetic operations and type conversions */
    printf("a + c =  %d\n", a + c);
    printf("x + c = %f\n", x + c);
    printf("dx + x = %f\n", dx + x);
    printf("((int) dx) + ax =  %ld\n", ((int) dx) + ax);
    printf("a + x = %f\n", a + x);
    printf("s + b =  %d\n", s + b);
    printf("ax + b = %ld\n", ax + b);
    printf("s + c =  %hd\n", s + c);
    printf("ax + c = %ld\n", ax + c);
    printf("ax + ux = %lu\n", ax + ux);
 
    return 0;
}</pre>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/17.mp4" type="video/mp4"/></video></span></p>
<p><span>8.</span><span>編寫一個 C 程序，將指定的日期轉換為年、週和日</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main()
{
    int days, years, weeks;
 
    days = 1329; // Total number of days
 
    // Converts days to years, weeks and days
    years = days/365; // Calculate years
    weeks = (days % 365)/7; // Calculate weeks
    days = days - ((years*365) + (weeks*7)); // Calculate remaining days
 
    // Print the results
    printf("Years: %d\n", years);
    printf("Weeks: %d\n", weeks);
    printf("Days: %d \n", days);
 
    return 0;
}
</pre>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/18.mp4" type="video/mp4"/></video></span></p>
<p><span>9.<span>寫一</span></span><span><span>個</span></span><span><span> C 程序，接受使用者提供的兩個整數併計算這兩個整數的和</span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
    int x, y;
    int result1, result2; // 用于存储 scanf 的返回值
 
    // 获取第一个整数
    printf("Input the first integer: ");
    result1 = scanf("%d", &amp;x);
    if (result1 != 1) {
        printf("Error: Please enter an integer.\n");
        return 1;
    }
 
    // 获取第二个整数
    printf("Input the second integer: ");
    result2 = scanf("%d", &amp;y);
    if (result2 != 1) {
        printf("Error: Please enter an integer.\n");
        return 1;
    }
 
    // 计算并输出它们的和
    printf("Sum of the two integers = %d\n", x + y);
 
    return 0;
}
</pre>
<p><span><span><video controls="controls" height="630" width="1004">
<source src="/images/19.mp4" type="video/mp4"/></video></span></span></p>
<p><span><span>10.<span>寫一個 C 程序，接受使用者提供的兩個整數併計算這兩個整數的乘</span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
    int x, y;
    int result_x, result_y; // 用於儲存 scanf 的返回值
 
    // 獲取第一個整數
    printf("輸入第一個整數：");
    result_x = scanf("%d", &amp;x);
    if (result_x != 1) {
        printf("錯誤：請輸入整數。\n");
        return 1;
    }
 
    // 獲取第二個整數
    printf("輸入第二個整數：");
    result_y = scanf("%d", &amp;y);
    if (result_y != 1) {
        printf("錯誤：請輸入整數。\n");
        return 1;
    }
 
    // 計算並輸出它們的乘積
    printf("這兩個整數的乘積 = %d\n", x * y);
 
    return 0;
}
</pre>
<p><span><span><span><video controls="controls" height="630" width="1004">
<source src="/images/20.mp4" type="video/mp4"/></video><br/><br/></span></span></span></p>
<h2>上課內容</h2>
<p><span><span><span>1.<span>寫一個 C 程序，接受兩個商品的重量和購買數量（浮點值）併計算它們的平均值</span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() 
{
    double wi1, ci1, wi2, ci2, result; // 宣告變數表示重量和數量
 
    // 提示使用者輸入 item 1 的重量
    printf("Weight - Item1: ");
    if (scanf("%lf", &amp;wi1) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }
     
    // 提示使用者輸入 item 1 的數量
    printf("No. of item1: ");
    if (scanf("%lf", &amp;ci1) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }
     
    // 提示使用者輸入 item 2 的重量
    printf("Weight - Item2: ");
    if (scanf("%lf", &amp;wi2) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }
     
    // 提示使用者輸入 item 2 的數量
    printf("No. of item2: ");
    if (scanf("%lf", &amp;ci2) != 1) { // 讀取並檢查輸入值
        printf("Error: Please enter a valid number.\n"); // 如果輸入無效，輸出錯誤訊息
        return 1; // 返回非零值表示程式出錯
    }
     
    // 計算平均值
    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);
     
    // 輸出平均值
    printf("Average Value = %f\n", result);
     
    return 0; // 返回零表示程式正常結束
}</pre>
<p><span><span><span><span><img alt="" height="261" src="/images/螢幕擷取畫面 2024-01-14 143011.png" width="608"/></span></span></span></span></p>
<p><span><span><span><span>2.<span>寫一個 C 程序，接受員工的 ID、一個月的總工作時間、他每小時收到的金額</span></span></span></span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
    char id[10];         // 宣告變數表示員工ID（最多10個字元）
    int hour;            // 宣告變數表示工作時數
    double value, salary; // 宣告變數表示每小時薪水和總薪水
 
    // 使用一個變數存儲 scanf 的返回值以避免警告
    int result;
 
    // 提示用戶輸入員工ID
    printf("Input the Employees ID(Max. 10 chars): ");
    result = scanf("%9s", id); // 讀取並檢查輸入的ID，限制最多讀取9個字元
 
    if (result != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid Employee ID.\n");
        return 1; // 返回1表示出錯
    }
 
    // ... 以下略，後續的程式碼保持不變 ...
 
    return 0; // 返回0表示程式正常結束
}</pre>
<p><img alt="" height="593" src="/images/螢幕擷取畫面 2024-01-14 151934.png" width="611"/></p>
<p><span>3.</span><span>寫一個 C 程序，接受三個整數並找出三個整數中的最大值</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
int main()
{
    int x, y, z, result, max; // 宣告變數
 
    // 提示用戶輸入第一個整數並存儲在 'x' 中
    printf("\nInput the first integer: ");
    if (scanf("%d", &amp;x) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }
 
    // 提示用戶輸入第二個整數並存儲在 'y' 中
    printf("\nInput the second integer: ");
    if (scanf("%d", &amp;y) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }
 
    // 提示用戶輸入第三個整數並存儲在 'z' 中
    printf("\nInput the third integer: ");
    if (scanf("%d", &amp;z) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }
 
    // 計算結果
    result = (x + y + abs(x - y)) / 2;
 
    // 計算最大值
    max = (result + z + abs(result - z)) / 2;
 
    // 輸出最大值
    printf("\nMaximum value of three integers: %d\n", max);
 
    return 0; // 返回0表示程式正常結束
}</pre>
<p><img alt="" height="271" src="/images/螢幕擷取畫面 2024-01-14 152101.png" width="613"/></p>
<p><span>4.</span><span>寫一個 C 程序，根據給定的總行駛距離（整數值）（以公里為單位）和用過的燃料（以公升為單位，浮點數 - 2 位小數）計算自行車的平均消耗量</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() 
{
    int x;    // 用來儲存總行駛公里數
    float y;  // 用來儲存總耗油量
 
    // 提示用戶輸入總行駛公里數並存儲在 'x' 中
    printf("Input total distance in km: ");
    if (scanf("%d", &amp;x) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid integer.\n");
        return 1; // 返回1表示出錯
    }
 
    // 提示用戶輸入總耗油量並存儲在 'y' 中
    printf("Input total fuel spent in liters: ");
    if (scanf("%f", &amp;y) != 1) { // 檢查 scanf 的返回值
        printf("Error: Please enter a valid float number.\n");
        return 1; // 返回1表示出錯
    }
 
    // 檢查總耗油量是否為0，以避免除以0的情況
    if (y == 0) {
        printf("Error: Total fuel spent cannot be zero.\n");
        return 1; // 返回1表示出錯
    }
 
    // 計算並輸出平均油耗
    printf("Average consumption (km/lt): %.3f\n", x / y);
 
    return 0; // 返回0表示程式正常結束
}</pre>
<p><span><img alt="" height="194" src="/images/螢幕擷取畫面 2024-01-14 152142.png" width="621"/></span></p>
<p><span>5.</span><span>用 C 語言寫一個程序，使用函數求任意數字的平方</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
double square(double num) {
    return (num * num);
}
 
int main() {
    int num;
    double n;
    int scanfResult; // 變數用於儲存 scanf 的返回值
 
    printf("\n\n 函式：計算任意數字的平方值 :\n");
    printf("------------------------------------------------\n");
 
    printf("輸入任意數字以計算平方值：");
    scanfResult = scanf("%d", &amp;num); // 將 scanf 的返回值儲存在變數中
 
    if (scanfResult != 1) {
        printf("輸入錯誤或無效的數字。\n");
        return 1; // 適當的錯誤處理
    }
 
    n = square(num);
    printf("%d 的平方是：%.2f\n", num, n);
 
    return 0;
}</pre>
<p><span><img alt="" height="214" src="/images/螢幕擷取畫面 2024-01-14 152346.png" width="602"/></span></p>
<p><span>6.<span>用 C 語言寫一個程序，使用函數交換兩個數字</span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
 
void swap(int *, int *);
 
int main() {
    int n1, n2;
    int scanfResult1, scanfResult2; // 儲存 scanf 函式的返回值
 
    printf("\n\n 函式 : 使用函式交換兩個數字 :\n");
    printf("------------------------------------------------\n");
 
    printf("輸入第一個數字 : ");
    scanfResult1 = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值
 
    printf("輸入第二個數字 : ");
    scanfResult2 = scanf("%d", &amp;n2); // 儲存 scanf 函式的返回值
 
    // 檢查 scanf 的返回值
    if (scanfResult1 != 1 || scanfResult2 != 1) {
        printf("錯誤的輸入。\n");
        return 1; // 適當的錯誤處理
    }
 
    printf("交換前 : n1 = %d, n2 = %d ", n1, n2);
    swap(&amp;n1, &amp;n2);
    printf("\n交換後 : n1 = %d, n2 = %d \n\n", n1, n2);
     
    return 0;
}
 
void swap(int *p, int *q) {
    int tmp;
    tmp = *p;
    *p = *q;
    *q = tmp;
}
</pre>
<p><img alt="" height="245" src="/images/螢幕擷取畫面 2024-01-14 152437.png" width="603"/></p>
<p><span>7.</span><span>使用函數檢查給定數字是偶數還是奇數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int checkOddEven(int n1)
{   
    return (n1 &amp; 1);
}
 
int main()
{
    int n1;
    int scanfResult; // 儲存 scanf 函式的返回值
 
    printf("\n\n 函式：檢查數字是奇數還是偶數：\n");
    printf("------------------------------------------------\n");
 
    printf("輸入任意數字：");
    scanfResult = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值
 
    if (scanfResult != 1) {
        printf("無效的輸入。\n");
        return 1; // 適當的錯誤處理
    }
 
    if(checkOddEven(n1))
    {
        printf("輸入的數字是奇數。\n\n");
    }
    else
    {
        printf("輸入的數字是偶數。\n\n");
    }
    return 0;
}</pre>
<p><img alt="" height="261" src="/images/螢幕擷取畫面 2024-01-14 152520.png" width="603"/></p>
<p><span>8.</span><span>使用函數求 1!/1+2!/2+3!/3+4!/4+5!/5 數列的和</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int fact(int);
 
int main() {
    int sum;
    // 計算數列總和：1!/1 + 2!/2 + 3!/3 + 4!/4 + 5!/5
    sum = fact(1) / 1 + fact(2) / 2 + fact(3) / 3 + fact(4) / 4 + fact(5) / 5;
 
    printf("\n\n 函式：計算數列 1!/1 + 2!/2 + 3!/3 + 4!/4 + 5!/5 的總和 :\n");
    printf("----------------------------------------------------------\n");
 
    printf("數列總和為 : %d\n\n", sum);
    return 0;
}
 
// 計算階乘的函式
int fact(int n) {
    int num = 0, f = 1;
 
    // 計算階乘
    while (num &lt;= n - 1) {
        f = f + f * num; // 這裡的階乘計算方式可能不正確
        num++;
    }
    return f;
}</pre>
<p><img alt="" height="235" src="/images/螢幕擷取畫面 2024-01-14 152706.png" width="604"/></p>
<p><span>9.</span><span>使用函數將十進制數轉換為二進制數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
 
long toBin(int);
 
int main()
{
    long bno;
    int dno;
    int scanfResult; // 儲存 scanf 函式的返回值
 
    printf("\n\n 函式 : 十進制轉二進制 :\n");
    printf("-------------------------------------------\n");
    printf(" 輸入任意十進制數字 : ");
 
    scanfResult = scanf("%d", &amp;dno); // 儲存 scanf 函式的返回值
 
    if (scanfResult != 1) {
        printf("輸入錯誤或無效的數字。\n");
        return 1; // 適當的錯誤處理
    }
 
    bno = toBin(dno);
    printf("\n 二進制值為 : %ld\n\n", bno);
 
    return 0;
}
 
long toBin(int dno)
{
    long bno = 0, remainder, f = 1;
    while(dno != 0)
    {
        remainder = dno % 2;
        bno = bno + remainder * f;
        f = f * 10;
        dno = dno / 2;
    }
    return bno;
}</pre>
<p><img alt="" height="268" src="/images/螢幕擷取畫面 2024-01-14 152744.png" width="608"/></p>
<p><span>10.</span><span>使用函數檢查一個數是否為質數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int PrimeOrNot(int);
 
int main() {
    int n1, prime;
    int scanfResult; // 儲存 scanf 函式的返回值
 
    printf("\n\n 函式 : 檢查一個數字是否為質數 :\n");
    printf("---------------------------------------------------------------\n");
 
    printf(" 輸入一個正數 : ");
    scanfResult = scanf("%d", &amp;n1); // 儲存 scanf 函式的返回值
 
    // 檢查 scanf 的返回值以確保成功讀取一個整數
    if (scanfResult != 1) {
        printf("輸入無效。\n");
        return 1; // 適當的錯誤處理
    }
 
    prime = PrimeOrNot(n1);
 
    if (prime == 1)
        printf(" 數字 %d 是質數。\n", n1);
    else
        printf(" 數字 %d 不是質數。\n", n1);
 
    return 0;
}
 
int PrimeOrNot(int n1) {
    int i = 2;
    while (i &lt;= n1 / 2) {
        if (n1 % i == 0)
            return 0; // 若能被除了1和自身以外的數整除，則不是質數
        else
            i++;
    }
    return 1; // 若無法被其他數整除，則是質數
}</pre>
<p><img alt="" height="371" src="/images/螢幕擷取畫面 2024-01-14 160002.png" width="599"/></p>
<p><video controls="controls" height="630" width="1004">
<source src="/images/50.mp4" type="video/mp4"/></video></p>
<h1>C.EX</h1>
<h2>Exercises</h2>
<p><span>1.</span><span>Hello World</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    /* 印出 Hello */
    printf("Hello World!");
}
</pre>
<p><img alt="" height="39" src="/images/c1.png" width="201"/></p>
<p><span>2.Say Hello World! Bye Bye</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
/* 印出 Hello World! Bye Bye */
printf("Hello World! ");
printf("Bye ");
printf("Bye");
return 0;
}
</pre>
<p><img alt="" height="44" src="/images/c2.png" width="269"/></p>
<p><span>3.變數宣告的例子</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 1;
int A = 8;
int b = 2, c;
c = A - a + b;
/* 輸出 a, A, b, c 到螢幕 */
printf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );
return 0;
}</pre>
<p><img alt="" height="44" src="/images/c3.png" width="315"/></p>
<p><span>4.浮點運算的程式範例</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
void main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;
/* 輸出 a, b, c 到螢幕 */
printf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );
}
</pre>
<p><img alt="" height="39" src="/images/c4.png" width="302"/></p>
<p><span>5.字元範例 </span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
char x, y;
x = 'a';
y = (char)97;
/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
printf( " x = %c, y = %c, ASCII of y = %d", x, y, y );
return 0;
}
</pre>
<p><img alt="" height="35" src="/images/c5.png" width="331"/></p>
<p><span>6.digital - 1</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 64;
    int b = 0x40;
    long c = 64L;
    printf("%d, %d, %ld", a, b, c);
    return 0;
}
</pre>
<p><img alt="" height="43" src="/images/c6.png" width="179"/></p>
<p><span>7.輸入一個整數</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">int main()
{
int i;
printf("Input an integer:");
scanf( "%d", &amp;i ); /* ch 前面加個 &amp;(位址運算元) */
printf( "the number is %d", i );
return 0;
}</pre>
<p><img alt="" height="51" src="/images/c7.png" width="221"/></p>
<p><span>8.基本運算範例</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
int main()
{
int a,b;
a = 10; b = 3;
printf( "%d \n", a * b );
printf( "%d \n", a / b );
printf( "%d \n", a + b );
printf( "%d \n", a - b );
printf( "%d \n", a % b );
return 0;
}</pre>
<p><img alt="" height="100" src="/images/c8.png" width="174"/></p>
<p><span>9.關係運算元的範例</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
int main()
{
int a = 10, b = 5;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
printf( "\n" );
b = 10;
printf( " a == b is %d \n", a == b );
printf( " a &gt; b is %d \n", a &gt; b );
printf( " a &lt; b is %d \n", a &lt; b );
printf( " a &gt;= b is %d \n", a &gt;= b );
printf( " a &lt;= b is %d \n", a &lt;= b );
printf( " a != b is %d \n", a != b );
return 0;
}</pre>
<p><img alt="" height="222" src="/images/c9.png" width="172"/></p>
<p><span>10.位元運算元的範例</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include&lt;stdio.h&gt;
void main()
{
int a,b;
a = 15;
b = 1;
printf("%d \n", a | b ); /* a OR b */
printf("%d \n", a &amp; b ); /* a AND b */
printf("%d \n", a ^ b ); /* a XOR b */
printf("%d \n", a &lt;&lt; 1 ); /* a 位元左移 1 位 */
printf("%d \n", a &gt;&gt; 1 ); /* a 位元右移一位 */
printf("%d \n", ~a ); /* A 的補數運算 */
}</pre>
<p><img alt="" height="110" src="/images/c10.png" width="158"/></p>
<h2>練習二</h2>
<p>1.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    char c;
    
    printf("輸入字符：");
    c = getchar(); /* 讀取輸入的字符 */
    
    printf("輸入的字符是：");
    putchar(c); /* 顯示輸入的字符 */
    
    return 0;
}
</pre>
<p><img alt="" height="28" src="/images/e.ex-1.png" width="167"/></p>
<p>2.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

int main()
{
    int this_is_a_number1, this_is_a_number2, total;

    printf("請輸入一個整數: \n");
    scanf("%d", &amp;this_is_a_number1); /* 讀取第一個整數 */
    printf("您輸入了 %d\n", this_is_a_number1);

    printf("請輸入另一個整數: \n");
    scanf("%d", &amp;this_is_a_number2); /* 讀取第二個整數 */
    printf("您輸入了 %d\n", this_is_a_number2);

    total = this_is_a_number1 + this_is_a_number2; /* 將兩個數字相加 */
    printf("總和為 %d\n", total);

    return 0;
}
</pre>
<p><img alt="" height="128" src="/images/e.ex-2.png" width="259"/></p>
<p>3.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

int main()
{
    float this_is_a_number1, this_is_a_number2, total;

    printf("請輸入一個數字: \n");
    scanf("%f", &amp;this_is_a_number1); /* 讀取第一個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number1);

    printf("請輸入另一個數字: \n");
    scanf("%f", &amp;this_is_a_number2); /* 讀取第二個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number2);

    total = this_is_a_number1 + this_is_a_number2; /* 將兩個數字相加 */
    printf("總和為 %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="135" src="/images/e.ex-3.png" width="264"/></p>
<p>4.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

int main()
{
    float this_is_a_number1, this_is_a_number2, total;

    printf("請輸入一個數字: \n");
    scanf("%f", &amp;this_is_a_number1); /* 讀取第一個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number1);

    printf("請輸入另一個數字: \n");
    scanf("%f", &amp;this_is_a_number2); /* 讀取第二個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number2);

    total = this_is_a_number1 * this_is_a_number2; /* 將兩個數字相乘 */
    printf("乘積為 %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="129" src="/images/e.ex-4.png" width="234"/></p>
<p>5.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

int main()
{
    float this_is_a_number1, this_is_a_number2, total;

    printf("請輸入一個數字: \n");
    scanf("%f", &amp;this_is_a_number1); /* 讀取第一個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number1);

    printf("請輸入另一個數字: \n");
    scanf("%f", &amp;this_is_a_number2); /* 讀取第二個浮點數 */
    printf("您輸入了 %f\n", this_is_a_number2);

    total = this_is_a_number1 / this_is_a_number2; /* 將兩個數字相除 */
    printf("商為 %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="127" src="/images/e.ex-5.png" width="231"/></p>
<p>6.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* 示範使用 for 迴圈的程式 */
int main()
{
    float this_is_a_number, total = 0;
    int i;

    /* 使用 for 迴圈執行 10 次 */
    for (i = 0; i &lt; 10; i++)
    {
        printf("請輸入一個數字:\n ");
        scanf("%f", &amp;this_is_a_number); /* 讀取數字 */
        total = total + this_is_a_number;
    }

    printf("總和為 = %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="357" src="/images/e.ex-6.png" width="236"/></p>
<p>7.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 示範使用巢狀 for 迴圈的程式 */
int main()
{
    float this_is_a_number, total = 0;
    int i, j;

    /* 外層的 for 迴圈執行 10 次 */
    for (i = 0; i &lt; 10; i++)
    {
        /* 內層的 for 迴圈執行 2 次 */
        for (j = 0; j &lt; 2; j++)
        {
            printf("請輸入一個數字:\n ");
            scanf("%f", &amp;this_is_a_number); /* 讀取數字 */
            total = total + this_is_a_number;
        }
    }

    printf("總和為 = %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="678" src="/images/e.ex-7.png" width="221"/></p>
<p>8.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 示範使用 do-while 迴圈的程式 */
int main()
{
    float this_is_a_number, total = 0;
    int i = 0;

    /* do-while 迴圈會一直執行，直到 i 的值達到 10 */
    do
    {
        printf("請輸入一個數字:\n ");
        scanf("%f", &amp;this_is_a_number); /* 讀取數字 */
        total = total + this_is_a_number;
        i++;
    } while (i &lt; 10);

    printf("總和為 = %f\n", total);

    return 0;
}
</pre>
<p><img alt="" height="359" src="/images/e.ex-8.png" width="208"/></p>
<p>9.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 示範使用 switch 選擇結構的程式 */
int main()
{
    int this_is_a_number;
    
    printf("請輸入介於1和5之間的整數:\n ");
    scanf("%d", &amp;this_is_a_number);

    switch (this_is_a_number)
    {
    case 1:
        printf("Case1: 值為: %d", this_is_a_number);
        break;
    case 2:
        printf("Case2: 值為: %d", this_is_a_number);
        break;
    case 3:
        printf("Case3: 值為: %d", this_is_a_number);
        break;
    case 4:
        printf("Case4: 值為: %d", this_is_a_number);
        break;
    case 5:
        printf("Case5: 值為: %d", this_is_a_number);
        break;
    default:
        printf("錯誤！輸入值為: %d", this_is_a_number); /* 輸入的數字不在1和5之間 */
    }

    return 0;
}
</pre>
<p><img alt="" height="70" src="/images/e.ex-9.png" width="328"/></p>
<p>10.</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#define _CRT_SECURE_NO_WARNINGS
#include &lt;stdio.h&gt;

/* 示範使用 switch 依據輸入的字元進行選擇的程式 */
int main()
{
    char this_is_a_character;
    
    printf("請輸入字元 a、b、c、d 或 e:\n ");
    scanf(" %c", &amp;this_is_a_character); // 注意在 %c 前面加上空格，以避免吸收上一次的換行字元

    switch (this_is_a_character)
    {
    case 'a':
        printf("輸入了 a");
        break;
    case 'b':
        printf("輸入了 b");
        break;
    case 'c':
        printf("輸入了 c");
        break;
    case 'd':
        printf("輸入了 d");
        break;
    case 'e':
        printf("輸入了 e");
        break;
    default:
        printf("預設 ");
    }

    return 0;
}
</pre>
<p><img alt="" height="72" src="/images/e.ex-10.png" width="307"/><br/><br/></p>
<h1>教學影片</h1>
<h2>【1.電腦輔助設計室網路設定說明】</h2>
<p><span>(1) 手動設定，所以關閉自動偵測設定</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173146.png" width="724"/></p>
<p><span>(2) 手動設定IP位置</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173448.png" width="744"/></p>
<p><span>(3) 在近端(電腦輔助設計教室)</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173519.png" width="542"/></p>
<p><span>(4) 搜尋控制台</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173604.png" width="708"/></p>
<p><span>(5) 框框虛擬 打勾實體</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173613.png" width="717"/></p>
<p><span>(6) 關閉IPV4</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173621.png" width="537"/></p>
<p>(7) 開啟IPV6</p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173627.png" width="751"/></p>
<p><span>(8) 設定DNS</span></p>
<p><span><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173632.png" width="558"/></span></p>
<p><span>(9) 利用隨身碟批次檔案 設定網路環境</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173637.png" width="586"/></p>
<p><span>(10) 放入對應檔案</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173642.png" width="739"/></p>
<p><span>(11)</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173736.png" width="737"/></p>
<p><span>(12) 關閉IPV4 開啟IPV6</span></p>
<p><img alt="" height="400" src="/images/螢幕擷取畫面 2024-01-14 173742.png" width="585"/></p>
<h2>【2. Wink 網路設定】</h2>
<p><strong><span>(1)</span></strong></p>
<p><img alt="" height="438" src="/images/螢幕擷取畫面 2024-01-14 183015.png" width="800"/></p>
<p><strong><span>(2)</span></strong></p>
<p><img alt="" height="411" src="/images/螢幕擷取畫面 2024-01-14 183030.png" width="800"/></p>
<p><strong><span>(3)</span></strong></p>
<p><img alt="" height="417" src="/images/螢幕擷取畫面 2024-01-14 183114.png" width="800"/></p>
<p><strong><span>(4)</span></strong></p>
<p><img alt="" height="441" src="/images/螢幕擷取畫面 2024-01-14 183144.png" width="800"/></p>
<p><strong><span>(5</span></strong><strong><span>)</span></strong></p>
<p><strong><span><img alt="" height="447" src="/images/螢幕擷取畫面 2024-01-14 183201.png" width="800"/></span></strong></p>
<p><strong><span>(6)</span></strong></p>
<p><strong><span><img alt="" height="434" src="/images/螢幕擷取畫面 2024-01-14 183224.png" width="800"/></span></strong></p>
<p><strong><span>(7)</span></strong></p>
<p><strong><span><img alt="" height="429" src="/images/螢幕擷取畫面 2024-01-14 183341.png" width="800"/><br/></span></strong></p>
<p><strong><span>(8)</span></strong></p>
<p><strong><span><img alt="" height="470" src="/images/螢幕擷取畫面 2024-01-14 183358.png" width="800"/></span></strong></p>
<p><strong><span>(9)</span></strong></p>
<p><strong><span><img alt="" height="475" src="/images/螢幕擷取畫面 2024-01-14 183407.png" width="800"/></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p><strong><span></span></strong></p>
<p></p>
<h2>【4. 安裝與課程相關的 Apps, 網路設定與 ChatGPT 應用】</h2>
<p>(1)手機安裝Apps:ChatGPT, Github mobile, Replit, Authy, Teams, Onshape</p>
<p>(2)有技巧詢問ChatGPT</p>
<p>手機上的 Github mobile App 可用於 Github 帳號中的 2FA 流程, 幫助 Github 阻絕不當的 robot 濫用.<br/>Replit App 利用手機 Run 倉儲網站, 並以手機或平板瀏覽器管理較少量的網站編輯.<br/>Authy App 允許使用者利用手機或數位手錶取得 2FA 登入流程所需的 verification code.<br/>Teams App 利用手機參與 Microsoft 線上團隊課程.<br/>Onshape App 則可讓使用者利用手機或平面檢視或修改協同產品設計流程中的零組件.</p>
<p>(3)在命令搜尋區輸入 cmd (command 命令提示字元), 後利用 ipconfig /all 指令取得目前的網路設定.</p>
<p>2001開始的為外部IP.</p>
<p>f180為內部.</p>
<p>192.168.1為內部IPv4.</p>
<p>利用【自動】取的IP位置可減少網路重疊.</p>
<p>140.130.1為學校網段.</p>
<p>(4)Q:為甚麼會有兩個冒號?</p>
<p>    A:因為總共有8個區段，中間有4個區段為0.</p>
<p>(5)Q:出現防火牆把網路關閉?</p>
<p>     A:因為電腦中有軟體有問題被防毒軟體誤會要入侵系統才會把網路關閉</p>
<h2>【5. 可攜程式環境的設定說明, 如何在可攜環境中編譯執行 C 程式】</h2>
<p><span>(1) 這門課的可攜環境，雙點擊可以在近端啟動可攜程式環境.</span></p>
<p><span><img alt="" height="689" src="/images/螢幕擷取畫面 2024-01-14 180405.png" width="800"/></span></p>
<p><span>(2) 開啟(必須在檢視-顯示項目下勾選"副檔名"與"隱藏的項目").</span></p>
<p><span><img alt="" height="603" src="/images/螢幕擷取畫面 2024-01-14 180434.png" width="800"/></span></p>
<p><span>(3) 會跳出4個命令<img alt="" height="188" src="/images/螢幕擷取畫面 2024-01-14 180643.png" width="800"/></span></p>
<p><span></span></p>
<p>(4) 2個編輯器</p>
<p><img alt="" height="204" src="/images/螢幕擷取畫面 2024-01-14 180837.png" width="233"/></p>
<p><span>(5)</span></p>
<p><span><img alt="" height="450" src="/images/螢幕擷取畫面 2024-01-14 181243.png" width="800"/></span></p>
<p><span>(6)</span></p>
<p><span><img alt="" height="450" src="/images/螢幕擷取畫面 2024-01-14 181314.png" width="800"/></span></p>
<p><span>(7) 其中已經設定透過 Tiny C Compiler 編譯執行副檔名為 .c 的程式</span></p>
<p><span><img alt="" height="562" src="/images/螢幕擷取畫面 2024-01-14 181338.png" width="800"/></span></p>
<p><span><strong>(8) 用 SciTE 編輯器中的 Tools - Go 功能表執行 ANSI C 程式</strong></span></p>
<p><span><img alt="" height="394" src="/images/螢幕擷取畫面 2024-01-14 181728.png" width="574"/></span></p>
<p><span><strong>(9) 10次hello world</strong></span></p>
<p><span><img alt="" height="364" src="/images/螢幕擷取畫面 2024-01-14 181945.png" width="559"/></span></p>
<p><span>(10) 清除output</span></p>
<p><span><img alt="" height="442" src="/images/螢幕擷取畫面 2024-01-14 182000.png" width="560"/></span></p>
<p><span></span></p>
<h2>【7.如何利用 Replit 協助編輯倉儲與網頁-2】</h2>
<p><video controls="controls" height="630" width="1004">
<source src="/images/++.mp4" type="video/mp4"/></video></p>
<h2>【9. Github 倉儲設定 Pages 靜態網站】</h2>
<p><strong><span>(1) 利用主分支建立網頁:Source來源/Branch分支/main主分支</span></strong></p>
<p><strong><span><img alt="" height="450" src="/images/螢幕擷取畫面 2024-01-14 210253.png" width="800"/></span></strong></p>
<p><strong><span>(2) 網頁根目錄</span></strong></p>
<p><strong><span><img alt="" height="450" src="/images/螢幕擷取畫面 2024-01-14 210354.png" width="800"/></span></strong></p>
<p><strong><span>(3) mdecp2023.github.io/倉儲名稱</span></strong></p>
<p><strong><span><img alt="" height="358" src="/images/螢幕擷取畫面 2024-01-14 210450.png" width="799"/></span></strong></p>
<p><strong><span>(4)</span></strong></p>
<p><strong><span><img alt="" height="40" src="/images/螢幕擷取畫面 2024-01-14 210940.png" width="800"/></span></strong></p>
<p><strong><span>(5) 網</span></strong><strong><span>址</span></strong></p>
<p><strong><span><img alt="" height="430" src="/images/螢幕擷取畫面 2024-01-14 211043.png" width="800"/></span></strong></p>
<p><strong><span></span></strong></p>
<h2>【10. 在 Repllit 中編譯執行 C 程式】</h2>
<p><strong><span>(1) 靜態</span></strong></p>
<p><strong><span><img alt="" height="429" src="/images/螢幕擷取畫面 2024-01-14 212142.png" width="800"/></span></strong></p>
<p><strong><span>(2) 推送內容及進度</span></strong></p>
<p><img alt="" height="430" src="/images/螢幕擷取畫面 2024-01-14 211548.png" width="800"/></p>
<p><strong><span>(3) 創建.c</span></strong></p>
<p><img alt="" height="394" src="/images/螢幕擷取畫面 2024-01-14 212204.png" width="800"/></p>
<p><strong><span>(4) 在 Shell 打Clear/cd downloads/cc gnuplot_ex1.c/./a.out</span></strong></p>
<p><img alt="" height="431" src="/images/螢幕擷取畫面 2024-01-14 212300.png" width="800"/></p>
<p><strong><span>(5) 跑出圖片</span></strong></p>
<p><img alt="" height="430" src="/images/螢幕擷取畫面 2024-01-14 212317.png" width="800"/></p>
<p><strong><span>(6) C++/複製程式</span></strong></p>
<p><img alt="" height="450" src="/images/螢幕擷取畫面 2024-01-14 203744.png" width="800"/></p>
<p><strong><span>(7) 貼上圖片</span></strong></p>
<p><img alt="" height="430" src="/images/螢幕擷取畫面 2024-01-14 212410.png" width="800"/></p>
<p><strong><span>(8) 推上網站</span></strong></p>
<p><img alt="" height="431" src="/images/螢幕擷取畫面 2024-01-14 212419.png" width="800"/></p>
<h2>【15. Wink 說明影片】</h2>
<p><span>   0:20後 </span></p>
<p><span><video controls="controls" height="630" width="1004">
<source src="/images/++.mp4" type="video/mp4"/></video></span></p>
<h2>【28. 利用 Gist 上的 Brython 直接在網頁中執行】</h2>
<p><video controls="controls" height="630" width="1004">
<source src="/images/000.mp4" type="video/mp4"/></video></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>note</h1>
<p></p>
<p></p>
<h2>clone</h2>
<p><span style="background-color: #ffcc00;">帳號連接</span>:</p>
<p>利用<span><span style="background-color: #ffcc00;">命令提示字元(小黑窗)</span>連接個人倉儲</span>編輯網頁:</p>
<p>開啟小黑窗ipv6</p>
<p>打 git clone --recurse-submodules<span style="background-color: #ffcc00;">空格</span><span>複製貼上下列圖片網址</span></p>
<p><span>完成後enter</span></p>
<p><img alt="" height="406" src="/images/螢幕擷取畫面 2024-01-14 205229.png" width="800"/></p>
<p><span style="background-color: #ffcc00;">token設定</span></p>
<p>Personal access tokens</p>
<p>開啟github帳號點選右上頭像並點選Settings<br/>點選Developer settings<br/>點選Personal access tokens<br/>點選Generate new token(classic)<br/>Note 名稱(任意)<br/>Expiration 到期(建議90天)<br/>勾選repo(第一個)<br/>點選最下面的Generate token<br/>複製產生出來的token<br/>開啟可攜系統<br/>開啟欲設Personal access tokens的資料夾<br/>點開<span>.<span style="background-color: #ffcc00;">git</span></span>(要開隱藏項目才看的到)<br/>將裡面的<span>congif拉到SciTE</span>(灰色圓球)<br/>將複製的字串貼在github.com的前面再加上<span style="background-color: #ffcc00;">@並存檔(CTRL+S)</span><br/>Personal access tokens就設定完成</p>
<p>最後再回到可攜系統打cms enter後，即可順利開啟近端編輯個人網頁</p>
<p></p>
<h2>ssh</h2>
<p>下載putty</p>
<p>在putty資料夾內開啟puttygen.exe生成一把鑰匙</p>
<p>將key儲存在github帳號內(開啟設定點選ssh)</p>
<p>回到puttygen.exe按save private key即可</p>
<p>再開啟putty</p>
<p>Host Name輸入github.com</p>
<p>Saved Sessions輸入自己的學號</p>
<p><img alt="" height="446" src="/images/螢幕擷取畫面 2024-01-14 204559.png" width="446"/></p>
<p><span>點選proxy改設定</span></p>
<p><img alt="" height="441" src="/images/螢幕擷取畫面 2024-01-14 204635.png" width="453"/></p>
<p><span>再點選ssh內的Auth裡面Credentials</span></p>
<p><img alt="" height="442" src="/images/螢幕擷取畫面 2024-01-14 204827.png" width="455"/></p>
<p></p>
<p><span>匯出即可</span></p>
<h1>期末總結</h1>
<p>41223235 <span>(ABCDEFGH) 75分</span></p>
<p>倉儲與網站評分項目:</p>
<p><span>A: 是否<span>按照進度明確標示倉儲的改版歷程</span></span></p>
<p><span>B: 是否根據<span> </span><span>IPv4 與 IPv6</span><span> </span>網路環境設定進行作法討論</span></p>
<p><span>C: 是否就<span><span> </span>Replit、s.cycu.org 與 localhost</span><span> </span>情境下對個人與分組倉儲進行設定操作</span></p>
<p><span>D: 是否完成<a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a>中的 Exercises</span></p>
<p><span>E: 是否完成<span> </span><a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span> </span>週任務中的 Exercises</span></p>
<p><span>F: 是否完成<span> </span><a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span> </span>週任務中的練習一與練習二<br/></span></p>
<p><span>G: 是否完成 C 結合 gd 繪圖程式庫, 畫出<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg">規格</a>),<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg">規格</a>),<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg">規格</a>)與<span> </span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">South Korea</a>(<a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg">規格</a>) Flags</span></p>
<p><span>H: 是否完成 w16 Final Project</span></p><h2>心得</h2>
<h4 style="text-align: justify;">在這堂課中，是我完全沒接觸過的領域，剛開始認識程式語言發現程式和網站都是英文，英文底子不好的我很畏懼，但一直重複看著老師給的操作過程示範，學會了如何在Github上建立倉儲和Replit協助編輯網頁內容，以及wink3截圖編輯成影片，在課後留下來聽老師分享很多以前到現在的新軟體整體趨勢等等，也知道在程式上面每個操作和網站修改都要上傳給github留下紀錄是非常重要，學習程式上是使用問ChatGpt來講解每行的目的，並更深入知道程式每小段段落的意思，在宿舍時不懂的地方有問題也都會互相研究學習，對網頁的編輯還有程式的運用能更快的上手，學期過後也充分學到非常多程式，在這堂計算機概論讓我真的收穫很多。</h4>
<h4></h4>
<p><span>，</span></p>
<p></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>